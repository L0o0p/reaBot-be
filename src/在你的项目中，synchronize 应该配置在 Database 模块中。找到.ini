在你的项目中，synchronize 应该配置在 Database 模块中。找到你的 `src/database/typeorm.module.ts` 文件：

```typescript
// src/database/typeorm.module.ts

import { Module } from '@nestjs/common';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ConfigService } from '@nestjs/config';

@Module({
  imports: [
    TypeOrmModule.forRootAsync({
      useFactory: (configService: ConfigService) => ({
        type: 'postgres',
        host: configService.get('DB_HOST'),
        port: configService.get('DB_PORT'),
        username: configService.get('DB_USERNAME'),
        password: configService.get('DB_PASSWORD'),
        database: configService.get('DB_DATABASE'),
        entities: [__dirname + '/../**/*.entity{.ts,.js}'],
        // 根据环境变量设置 synchronize
        synchronize: configService.get('NODE_ENV') === 'development',
        // 建议添加日志配置，方便调试
        logging: configService.get('NODE_ENV') === 'development',
      }),
      inject: [ConfigService],
    }),
  ],
})
export class Database {}
```

然后在你的 `.env` 文件中添加环境变量：
```env
NODE_ENV=development  # 或 production
DB_HOST=localhost
DB_PORT=5432
DB_USERNAME=your_username
DB_PASSWORD=your_password
DB_DATABASE=your_database
```

如果你想在不同环境使用不同的配置文件：
1. `.env.development` - 开发环境
2. `.env.production` - 生产环境

然后在 `package.json` 中设置启动脚本：
```json
{
  "scripts": {
    "start:dev": "NODE_ENV=development nest start --watch",
    "start:prod": "NODE_ENV=production node dist/main"
  }
}
```

这样：
- 开发时运行 `npm run start:dev`，synchronize 会是 true
- 生产环境运行 `npm run start:prod`，synchronize 会是 false

记住：
1. 生产环境一定要用 `NODE_ENV=production`
2. 生产环境的数据库修改必须通过迁移文件
3. 开发环境可以使用 synchronize:true 但要小心数据丢失